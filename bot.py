import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

TOKEN = "7889104731:AAGN2YRqTNZpdZlfylwQhNQmycPfQCCnwo0"
GROUP_ID = "1155525830"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
languages = {
    "ru": {
        "sections": {
            "0": "–£—á–µ–±–Ω–∞—è —á–∞—Å—Ç—å",
            "1": "–•–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å",
            "2": "–°—Ç–æ–ª–æ–≤–∞—è",
            "3": "–í–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å",
            "4": "–û–±—ä—è–≤–ª–µ–Ω–∏—è"
        },
        "subcategories": {
            "0": {
                "0": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π",
                "1": "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏",
                "2": "–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è",
                "3": "–≠–∫–∑–∞–º–µ–Ω—ã –∏ –∑–∞—á—ë—Ç—ã",
                "4": "–î—Ä—É–≥–æ–µ"
            },
            "1": {
                "0": "–ü–æ–ª–æ–º–∫–∏ –∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏",
                "1": "–û—Å–≤–µ—â–µ–Ω–∏–µ –∏ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ",
                "2": "–ú–µ–±–µ–ª—å –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                "3": "–î—Ä—É–≥–æ–µ"
            },
            "2": {
                "0": "–ö–∞—á–µ—Å—Ç–≤–æ –µ–¥—ã",
                "1": "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∏ –º–µ–Ω—é",
                "2": "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
                "3": "–î—Ä—É–≥–æ–µ"
            },
            "3": {
                "0": "–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ",
                "1": "–í–Ω–µ—É—Ä–æ—á–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
                "2": "–ü–æ—Å–µ—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–ø—É—Å–∫–∏",
                "3": "–î—Ä—É–≥–æ–µ"
            }
        },
        "messages": {
            "choose_lang": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
            "choose_section": "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å–∞—Ç–∞:",
            "choose_subcategory": "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            "enter_message": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            "success": "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
            "error": "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–º—É.",
            "start": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start."
        }
    },
    "kz": {
        "sections": {
            "0": "–û“õ—É –±”©–ª—ñ–º—ñ",
            "1": "–®–∞—Ä—É–∞—à—ã–ª—ã“õ –±”©–ª—ñ–º—ñ",
            "2": "–ê—Å—Ö–∞–Ω–∞",
            "3": "–¢”ô—Ä–±–∏–µ –±”©–ª—ñ–º—ñ",
            "4": "–•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä"
        },
        "subcategories": {
            "0": {
                "0": "–°–∞–±–∞“õ –∫–µ—Å—Ç–µ—Å—ñ",
                "1": "–û“õ—ã—Ç—É—à—ã–ª–∞—Ä",
                "2": "“Æ–π —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä—ã",
                "3": "–ï–º—Ç–∏—Ö–∞–Ω–¥–∞—Ä –º–µ–Ω —Ç–µ—Å—Ç—ñ–ª–µ—Ä",
                "4": "–ë–∞—Å“õ–∞"
            },
            "1": {
                "0": "–ê“õ–∞—É–ª–∞—Ä –º–µ–Ω –±“±–∑—ã–ª—É–ª–∞—Ä",
                "1": "–ñ–∞—Ä—ã“õ—Ç–∞–Ω–¥—ã—Ä—É –∂”ô–Ω–µ –∂—ã–ª—ã—Ç—É",
                "2": "–ñ–∏“ª–∞–∑ –∂”ô–Ω–µ –∂–∞–±–¥—ã“õ",
                "3": "–ë–∞—Å“õ–∞"
            },
            "2": {
                "0": "–¢–∞–º–∞“õ —Å–∞–ø–∞—Å—ã",
                "1": "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∂”ô–Ω–µ –º”ô–∑—ñ—Ä",
                "2": "“ö—ã–∑–º–µ—Ç –∫”©—Ä—Å–µ—Ç—É",
                "3": "–ë–∞—Å“õ–∞"
            },
            "3": {
                "0": "“ö–∞“õ—Ç—ã“ì—ã—Å—Ç–∞—Ä –º–µ–Ω –º—ñ–Ω–µ–∑-“õ“±–ª—ã“õ",
                "1": "–°—ã–Ω—ã–ø—Ç–∞–Ω —Ç—ã—Å —ñ—Å-—à–∞—Ä–∞–ª–∞—Ä",
                "2": "“ö–∞—Ç—ã—Å—É –∂”ô–Ω–µ —Å–∞–±–∞“õ “õ–∞–ª—É",
                "3": "–ë–∞—Å“õ–∞"
            }
        },
        "messages": {
            "choose_lang": "–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
            "choose_section": "–ê–ª“ì—ã—Ä —Ç–∞“£–¥–∞“£—ã–∑:",
            "choose_subcategory": "–°—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑:",
            "enter_message": "–•–∞–±–∞—Ä–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:",
            "success": "‚úÖ –°—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ!",
            "error": "“ö–∞—Ç–µ: —Ç–∞“õ—ã—Ä—ã–ø—Ç—ã –∞–Ω—ã“õ—Ç–∞—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å.",
            "start": "/start –ø”ô—Ä–º–µ–Ω—ñ–Ω–µ–Ω –±–∞—Å—Ç–∞“£—ã–∑."
        }
    }
}

topic_ids = {
    "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π": 101,
    "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏": 102,
    "–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è": 103,
    "–≠–∫–∑–∞–º–µ–Ω—ã –∏ –∑–∞—á—ë—Ç—ã": 104,
    "–î—Ä—É–≥–æ–µ": 105,
    "–ü–æ–ª–æ–º–∫–∏ –∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏": 201,
    "–û—Å–≤–µ—â–µ–Ω–∏–µ –∏ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ": 202,
    "–ú–µ–±–µ–ª—å –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": 203,
    "–ö–∞—á–µ—Å—Ç–≤–æ –µ–¥—ã": 301,
    "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∏ –º–µ–Ω—é": 302,
    "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ": 303,
    "–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ": 401,
    "–í–Ω–µ—É—Ä–æ—á–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è": 402,
    "–ü–æ—Å–µ—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–ø—É—Å–∫–∏": 403,
    "–°–∞–±–∞“õ –∫–µ—Å—Ç–µ—Å—ñ": 101,
    "–û“õ—ã—Ç—É—à—ã–ª–∞—Ä": 102,
    "“Æ–π —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä—ã": 103,
    "–ï–º—Ç–∏—Ö–∞–Ω–¥–∞—Ä –º–µ–Ω —Ç–µ—Å—Ç—ñ–ª–µ—Ä": 104,
    "–ë–∞—Å“õ–∞": 105,
    "–ê“õ–∞—É–ª–∞—Ä –º–µ–Ω –±“±–∑—ã–ª—É–ª–∞—Ä": 201,
    "–ñ–∞—Ä—ã“õ—Ç–∞–Ω–¥—ã—Ä—É –∂”ô–Ω–µ –∂—ã–ª—ã—Ç—É": 202,
    "–ñ–∏“ª–∞–∑ –∂”ô–Ω–µ –∂–∞–±–¥—ã“õ": 203,
    "–¢–∞–º–∞“õ —Å–∞–ø–∞—Å—ã": 301,
    "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∂”ô–Ω–µ –º”ô–∑—ñ—Ä": 302,
    "“ö—ã–∑–º–µ—Ç –∫”©—Ä—Å–µ—Ç—É": 303,
    "“ö–∞“õ—Ç—ã“ì—ã—Å—Ç–∞—Ä –º–µ–Ω –º—ñ–Ω–µ–∑-“õ“±–ª—ã“õ": 401,
    "–°—ã–Ω—ã–ø—Ç–∞–Ω —Ç—ã—Å —ñ—Å-—à–∞—Ä–∞–ª–∞—Ä": 402,
    "“ö–∞—Ç—ã—Å—É –∂”ô–Ω–µ —Å–∞–±–∞“õ “õ–∞–ª—É": 403
}

user_states = {}

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="“ö–∞–∑–∞“õ—à–∞", callback_data="lang_kz")
    keyboard.button(text="–†—É—Å—Å–∫–∏–π", callback_data="lang_ru")
    await message.answer(languages['ru']['messages']['choose_lang'], 
                        reply_markup=keyboard.as_markup())

@dp.callback_query(lambda c: c.data.startswith('lang_'))
async def process_language(callback: types.CallbackQuery):
    lang = callback.data.split('_')[1]
    user_states[callback.from_user.id] = {'lang': lang}
    await show_sections(callback.message, lang)

async def show_sections(message: types.Message, lang: str):
    keyboard = InlineKeyboardBuilder()
    sections = languages[lang]['sections']
    for key, value in sections.items():
        keyboard.button(text=f"{key} - {value}", callback_data=f"section_{key}")
    await message.edit_text(languages[lang]['messages']['choose_section'], 
                           reply_markup=keyboard.as_markup())

@dp.callback_query(lambda c: c.data.startswith('section_'))
async def process_section(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    lang = user_states[user_id]['lang']
    section_id = callback.data.replace("section_", "")
    user_states[user_id]["section"] = section_id
    
    keyboard = InlineKeyboardBuilder()
    subcats = languages[lang]['subcategories'][section_id]
    for key, value in subcats.items():
        keyboard.button(text=f"{key} - {value}", callback_data=f"sub_{key}")
        
    await callback.message.edit_text(languages[lang]['messages']['choose_subcategory'], 
                                   reply_markup=keyboard.as_markup())

@dp.callback_query(lambda c: c.data.startswith('sub_'))
async def process_subcategory(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    lang = user_states[user_id]['lang']
    section_id = user_states[user_id]["section"]
    subcat_id = callback.data.replace("sub_", "")
    
    subcat = languages[lang]['subcategories'][section_id][subcat_id]
    user_states[user_id]["subcategory"] = subcat
    await callback.message.edit_text(languages[lang]['messages']['enter_message'])

@dp.message()
async def process_message(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_states and "subcategory" in user_states[user_id]:
        lang = user_states[user_id]['lang']
        subcat = user_states[user_id]["subcategory"]
        topic_id = topic_ids.get(subcat)
        
        if topic_id:
            text = f"üìå {languages[lang]['messages']['success']} *{subcat}*:\n{message.text}"
            await bot.send_message(GROUP_ID, text, message_thread_id=topic_id, parse_mode="Markdown")
            await message.answer(languages[lang]['messages']['success'])
            del user_states[user_id]
        else:
            await message.answer(languages[lang]['messages']['error'])
    else:
        lang = user_states.get(user_id, {}).get('lang', 'ru')
        await message.answer(languages[lang]['messages']['start'])

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
